#!/bin/bash

# Copyright 2015--2018, Raphael Reitzig
# <code@verrech.net>
#
# tlwhich is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# tlwhich is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tlwhich. If not, see <http://www.gnu.org/licenses/>.

# TeX Live Which looks for package, class, command and environment definitions 
# in the *.sty and *.cls files installed in the local TeX Live installation.
# Pass a name (without leading slash); even grep-compatibel regular expressions 
# are possible.

# TODO: 
# * switch to hide redefinitions; 
# * switch(es) to hide sty/cls; 
# * switch for full path?
# * search in .tex files as well?
# * match substrings (optionally?)

set -o pipefail

# Where to search?
if ! which tlmgr > /dev/null; then
    echo "TeXlive not found";
    exit 1
fi

pdftex="$(readlink -f "`which pdftex`")";
texhome="${pdftex%bin/*/pdftex}";

if [ ! -d "${texhome}" ] || [ ! -f "${texhome}/install-tl" ]; then
    echo "TeXlive does not live at ${texhome%pdftex}" 
    # in error cases, above replacement may not have been effective
    exit 1
fi

# Set up the list of things to look for
types=( "cmd" "env" "pkg" "cls" )
declare -A labels;
labels["pkg"]="provide a package with similar name";
labels["cls"]="provide a class with similar name";
labels["env"]="define environment ${1}";
labels["cmd"]="define command ${1}";

declare -A patterns;
# Look for package definitions
patterns["pkg"]="\\\\ProvidesPackage{.*${1}.*}";

# Look for class definitions
patterns["cls"]="\\\\ProvidesClass{.*${1}.*}";

# What environment definitions to look for?
# - newenvironment
# - renewenvironment
# - Those from xparse
# - Those from xargs
# - NewEnviron (from environ)
#
# We *don't* look for pairs \def\env{...} ... \def\endenv{...} -- that's 
# not really feasible without context-free (or TeX) parsing.
patterns["env"]="\\\\((re)?newenvironment|NewEnviron|(Declare|New|Renew|Provide)DocumentEnvironment)x?\*?{${1}}";

# What command definitions to look for?
# - def (and variants)
# - newcommand
# - newcommand*
# - renewcommand
# - renewcommand*
# - providecommand
# - providecommand*
# - DeclareRobustCommand
# - CheckCommand
# - Those from xparse
# - Those from xargs
patterns["cmd"]="\\\\((e|x|g)?def|(Declare|New|Renew|Provide|DeclareExpandable|Check)DocumentCommand|(DeclareRobust|Check)Command|((re)?new|provide)command)x?\*?({\\\\${1}}|\\\\${1}(\[|\{))";

foundsth=0;
for type in ${types[@]}; do
  # Grep, truncate to base name (dropping errors, mostly when there are no matches), then sort
  res=`grep --include=*.{sty,cls} -l -r -E "${patterns[$type]}" "${texhome}" | xargs basename -a 2> /dev/null | sort`;
  if [[ "${res}" != "" ]];
  then
    if [[ ${foundsth} -gt 0 ]]; then echo ""; fi
    echo "Files that ${labels[$type]}:";
    for f in ${res};
    do
      echo -e '\t'"${f}";
    done;
    foundsth=1;
  fi
done;

if [[ ${foundsth} -gt 0 ]]; then 
  echo -e '\n'"Get full paths by running 'kpsewhich <file>'"; 
fi
